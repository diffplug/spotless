///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('Xwerror', '-quiet')
	enabled = org.gradle.api.JavaVersion.current() == org.gradle.api.JavaVersion.VERSION_1_8
}

// use markdown in javadoc
def makeLink = { url, text -> "<a href=\"${url}\" style=\"text-transform: none;\">${text}</a>" }
def javadocInfo = '<h2>' + makeLink("https://github.com/${org}/${name}", "${group}:${project.ext.artifactId}:${version}") +
		' by ' + makeLink('https://www.diffplug.com', 'DiffPlug') + '</h2>'

String dotdotGradle = project.name.startsWith('eclipse-') ? '../../gradle' : '../gradle'
apply plugin: 'org.jdrupes.mdoclet'
javadoc {
	options.encoding = 'UTF-8'
	// Where it's possible to name parameters and methods clearly enough
	// that javadoc is not necessary, why make the code bigger?
	//
	// Thus, no javadoc warnings.
	options.addStringOption('Xdoclint:none', '-quiet')
	// setup the header
	options.header javadocInfo
	options.footer javadocInfo
	// setup links
	options.linksOffline('https://docs.oracle.com/javase/8/docs/api/', "${dotdotGradle}/javadoc/java8")
	options.linksOffline('https://docs.gradle.org/2.14/javadoc/', "${dotdotGradle}/javadoc/gradle")

	// links to javadoc from the other versions
	options.linksOffline("https://javadoc.io/static/com.diffplug.spotless/spotless-lib/${rootProject.spotlessChangelog.versionLast}", "${dotdotGradle}/javadoc/spotless-lib")
	options.linksOffline("https://javadoc.io/static/com.diffplug.spotless/spotless-lib-extra/${rootProject.spotlessChangelog.versionLast}", "${dotdotGradle}/javadoc/spotless-lib-extra")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

////////////////
// PUBLISHING //
////////////////
final MAVEN_PLUGIN_ARTIFACT_NAME = 'spotless-maven-plugin'
boolean isExt = project.name.startsWith('eclipse-')
boolean isPluginMaven = project.ext.artifactId == 'spotless-maven-plugin'

model {
	publishing {
		publications {
			pluginMaven(MavenPublication) {
				if (project.ext.artifactId != 'spotless-plugin-gradle') {
					from components.java
				}
				artifact sourcesJar
				artifact javadocJar

				groupId project.group
				artifactId project.ext.artifactId
				version project.version

				pom.withXml {
					// add MavenCentral requirements to the POM
					asNode().children().last() + {
						resolveStrategy = Closure.DELEGATE_FIRST
						name project.ext.artifactId
						description project.description
						url "https://github.com/${project.org}/${rootProject.name}"
						scm {
							url "https://github.com/${project.org}/${rootProject.name}"
							connection "scm:git:https://github.com/${project.org}/${rootProject.name}.git"
							developerConnection "scm:git:ssh:git@github.com/${project.org}/${rootProject.name}.git"
						}
						licenses {
							if (isExt) {
								license {
									name 'Eclipse Public License - v 1.0'
									url 'https://www.eclipse.org/legal/epl-v10.html'
									distribution 'repo'
								}
							} else {
								license {
									name 'The Apache Software License, Version 2.0'
									url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
									distribution 'repo'
								}
							}
						}
						if (isPluginMaven) {
							// Maven plugin required Maven 3.1.0+ to run
							prerequisites { maven '3.1.0' }
						}
						developers {
							if (isExt) {
								project.ext.developers.each { extId, extValues ->
									developer {
										id extId
										name extValues['name']
										email extValues['email']
									}
								}
							} else {
								if (isPluginMaven) {
									developer {
										id 'lutovich'
										name 'Konstantin Lutovich'
										email 'konstantin.lutovich@neotechnology.com'
									}
								}
								developer {
									id 'nedtwigg'
									name 'Ned Twigg'
									email 'ned.twigg@diffplug.com'
								}
							}
						}
					}
				}
			}
		}
	}
}

if (!version.endsWith('-SNAPSHOT')) {
	// upload releases to bintray and then mavenCentral
	bintray {
		user = System.env['bintray_user']
		key = System.env['bintray_pass']
		publications = [
			'pluginMaven'
		]
		publish = true
		pkg {
			repo = 'opensource'
			name = project.ext.artifactId
			userOrg = project.org
			version {
				name = project.version
				mavenCentralSync {
					user = System.env['nexus_user']
					password = System.env['nexus_pass']
				}
			}
		}
	}

	publish.dependsOn(bintrayUpload)
	bintrayUpload.dependsOn([
		'generatePomFileForPluginMavenPublication',
		jar,
		sourcesJar,
		javadocJar
	])

	// find the project with the changelog (this project for plugins, root project for libs)
	def changelogTasks = (tasks.names.contains('changelogBump') ? project : rootProject).tasks

	// ensures that nothing will be built if changelogPush will end up failing
	tasks.named('jar').configure {
		dependsOn changelogTasks.named('changelogCheck')
	}
	// ensures that changelog bump and push only happens if the publish was successful
	changelogTasks.named('changelogBump').configure {
		dependsOn tasks.named('bintrayUpload')
		// only the root project has bintrayPublish, and it finalizes all bintrayUpload tasks
		// https://github.com/bintray/gradle-bintray-plugin/blob/3fe02dfdae3e807afba57e0140a0d4c2424674e1/src/main/groovy/com/jfrog/bintray/gradle/ProjectsEvaluatedBuildListener.groovy#L37-L41
		dependsOn rootProject.tasks.named('bintrayPublish')
		// if we have a gradle plugin, we need to push it up to the plugin portal too
		if (tasks.names.contains('publishPlugins')) {
			dependsOn tasks.named('publishPlugins')
		}
	}
}
