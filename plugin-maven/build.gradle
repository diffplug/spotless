buildscript {
	repositories { mavenCentral() }
	dependencies { classpath "com.github.spullara.mustache.java:compiler:${VER_MUSTACHE}" }
}
plugins { id 'cz.malohlava' version '1.0.3' // https://github.com/mmalohlava/gradle-visteg
}

// to generate taskGraph.pdf
// - set enabled (below) to true
// - run: ./gradlew :plugin-maven:test
// - run: rm plugin-maven/output.pdf
// - run: dot -Tpdf plugin-maven/build/reports/visteg.dot > plugin-maven/taskGraph.pdf
visteg {
	enabled = false
	nodeShape = 'box'
	startNodeShape = 'box'
	endNodeShape = 'box'
	colorscheme = 'pastel24' // http://www.graphviz.org/doc/info/colors.html
}

import com.github.mustachejava.DefaultMustacheFactory

import java.nio.file.Files
import java.nio.file.Paths

import static java.nio.charset.StandardCharsets.UTF_8
import static java.nio.file.StandardOpenOption.CREATE_NEW
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING

ext.artifactId = project.artifactIdMaven
ext.version = project.versionMaven
apply from: rootProject.file("gradle/java-setup.gradle")
apply from: rootProject.file("gradle/java-publish.gradle")

final PROJECT_DIR = project.projectDir.toString()
final BUILD_DIR = project.buildDir.toString()
final MAVEN_PROJECT_DIR = "${BUILD_DIR}/mavenProject"
final LOCAL_MAVEN_REPO_DIR = "${BUILD_DIR}/localMavenRepository"

def mvnw(String args) {
	boolean isWin = System.getProperty('os.name').toLowerCase().contains('win')
	if (isWin) {
		return [
			'cmd',
			'/c',
			'mvnw.cmd -e ' + args
		]
	} else {
		return [
			'/bin/sh',
			'-c',
			'./mvnw -e ' + args
		]
	}
}

dependencies {
	if (!project.versionMaven.endsWith('-SNAPSHOT') && project.versionLib.endsWith('-SNAPSHOT')) {
		// gradle = release, lib = snapshot, therefore gradle should depend on the last stable lib
		compile "com.diffplug.spotless:spotless-lib:${project.stableLib}"
		compile "com.diffplug.spotless:spotless-lib-extra:${project.stableLib}"
	} else {
		compile project(':lib')
		compile project(':lib-extra')
	}

	compile "org.codehaus.plexus:plexus-resources:${VER_PLEXUS_RESOURCES}"

	compileOnly "org.apache.maven:maven-plugin-api:${VER_MAVEN_API}"
	compileOnly "org.apache.maven.plugin-tools:maven-plugin-annotations:${VER_MAVEN_API}"
	compileOnly "org.eclipse.aether:aether-api:${VER_ECLIPSE_AETHER}"
	compileOnly "org.eclipse.aether:aether-util:${VER_ECLIPSE_AETHER}"

	testCompile project(":testlib")
	testCompile "junit:junit:${VER_JUNIT}"
	testCompile "org.assertj:assertj-core:${VER_ASSERTJ}"
	testCompile "org.mockito:mockito-core:${VER_MOCKITO}"
	testCompile "com.diffplug.durian:durian-testlib:${VER_DURIAN}"
	testCompile "com.github.spullara.mustache.java:compiler:${VER_MUSTACHE}"
	testCompile "org.apache.maven:maven-plugin-api:${VER_MAVEN_API}"
	testCompile "org.eclipse.aether:aether-api:${VER_ECLIPSE_AETHER}"
	testCompile "org.codehaus.plexus:plexus-resources:${VER_PLEXUS_RESOURCES}"
}

task cleanMavenProjectDir(type: Delete) { delete MAVEN_PROJECT_DIR }

task copySourceFiles(type: Sync) {
	from "src/main/java"
	into "${MAVEN_PROJECT_DIR}/src/main/java"
}

task copyMvnw(type: Copy) {
	from 'src/test/resources'
	include 'mvnw'
	include 'mvnw.cmd'
	include '.mvn/**'
	into MAVEN_PROJECT_DIR
}

task installLocalDependencies
def libs = [
	'lib',
	'lib-extra',
	'testlib'
]
libs.each {
	def groupId = 'com.diffplug.spotless'
	def artifactId = "spotless-${it}"
	def version = project.versionLib
	def jarTask = tasks.getByPath(":${it}:jar")
	def file = jarTask.archivePath

	def installDependency = task "install_${artifactId}"(type: Exec) {
		workingDir MAVEN_PROJECT_DIR

		inputs.file(file)
		outputs.dir(project.file("${LOCAL_MAVEN_REPO_DIR}/${groupId.replace('.', '/')}/${artifactId}/${version}"))
		commandLine mvnw("org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file " +
				"-Dfile=${file} " +
				"-DgroupId=${groupId} " +
				"-DartifactId=${artifactId} " +
				"-Dversion=${version} " +
				"-Dpackaging=jar " +
				"-DlocalRepositoryPath=${LOCAL_MAVEN_REPO_DIR}")
	}
	installDependency.dependsOn(jarTask)

	installLocalDependencies.dependsOn installDependency
}

task createPomXml(dependsOn: installLocalDependencies) {
	doLast {
		def additionalDependencies = project.configurations.compile.resolvedConfiguration.resolvedArtifacts.findAll {
			return !libs.contains(it.moduleVersion.id.name)
		}.collect {
			return  "    <dependency>\n" +
					"      <groupId>${it.moduleVersion.id.group}</groupId>\n" +
					"      <artifactId>${it.moduleVersion.id.name}</artifactId>\n" +
					"      <version>${it.moduleVersion.id.version}</version>\n" +
					"    </dependency>\n"
		}.join()

		def versions = [
			spotlessMavenPluginVersion: project.versionMaven,
			mavenApiVersion           : VER_MAVEN_API,
			eclipseAetherVersion      : VER_ECLIPSE_AETHER,
			spotlessLibVersion        : project.versionLib,
			plexusResourcesVersion    : VER_PLEXUS_RESOURCES,
			additionalDependencies    : additionalDependencies
		]

		def pomXmlTemplate = Paths.get(PROJECT_DIR, "src/test/resources/pom-build.xml.mustache")
		def newPomXml = Paths.get(MAVEN_PROJECT_DIR, "pom.xml")

		Files.newBufferedReader(pomXmlTemplate).withCloseable { reader ->
			Files.newBufferedWriter(newPomXml, UTF_8, CREATE_NEW, TRUNCATE_EXISTING).withCloseable { writer ->
				def mustache = new DefaultMustacheFactory().compile(reader, "pom")
				mustache.execute(writer, versions)
			}
		}
	}
}

task runMavenBuild(type: Exec, dependsOn: [
	cleanMavenProjectDir,
	copySourceFiles,
	copyMvnw,
	createPomXml
]) {
	workingDir MAVEN_PROJECT_DIR
	// -B batch mode to make dependency download logging less verbose
	commandLine mvnw("clean install -B -Dmaven.repo.local=${LOCAL_MAVEN_REPO_DIR}")
}

jar.deleteAllActions()
jar.dependsOn(runMavenBuild)
jar.doLast {
	Files.copy(
			file("${MAVEN_PROJECT_DIR}/target/spotless-maven-plugin-${project.versionMaven}.jar").toPath(),
			jar.archivePath.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING
			)
}

// usually test only depends on testClasses, which doesn't run the maven build that we need
test.dependsOn(jar)

test {
	testLogging { exceptionFormat = 'full' }
	// pass location of the local maven repository and plugin version to junit tests
	systemProperty "localMavenRepositoryDir", LOCAL_MAVEN_REPO_DIR
	systemProperty "spotlessMavenPluginVersion", project.versionMaven
}
