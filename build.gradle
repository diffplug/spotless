plugins {
	// bintray uploading
	id 'com.jfrog.bintray' version '1.3.1'
	// plugin publishing
	id 'com.gradle.plugin-publish' version '0.9.1'
	// github pages
	id "org.ajoberstar.github-pages" version "1.4.2"
	// p2 dependencies
	id 'com.diffplug.gradle.p2.asmaven' version '3.3.0'
	// ide setup
	id 'com.diffplug.gradle.oomph.ide' version '3.3.0'
}

repositories {
	jcenter()
	// SNAPSHOT versions are free to rely on other SNAPSHOT libraries
	if (project.version.endsWith('-SNAPSHOT')) {
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
		configurations.all {
			resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		}
	}
}

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'java-gradle-plugin'
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// The dependencies we'd like to pull from Eclipse's p2 repositories
def eclipseDeps = [
	// The dependencies we actually use
	'org.eclipse.jdt.core',
	'org.eclipse.text',

	// Their transitives
	'org.eclipse.core.contenttype',
	'org.eclipse.core.jobs',
	'org.eclipse.core.runtime',
	'org.eclipse.core.resources',
	'org.eclipse.equinox.common',
	'org.eclipse.equinox.preferences',
	'org.eclipse.osgi'
]
// build a maven repo in our build folder containing these artifacts
p2AsMaven {
	group 'p2', {
		repoEclipse VER_ECLIPSE
		eclipseDeps.each { p2.addIU(it) }
		eclipseDeps.each { p2.addIU(it + '.source') }
	}
}

///////////////
// SETUP IDE //
///////////////
apply plugin: 'com.diffplug.gradle.oomph.ide'
oomphIde {
	repoEclipseLatest()
	jdt {}
	splash 'images/spotless_logo.png'
	style {
		classicTheme()	// oldschool cool
		niceText()		// nice fonts and visible whitespace
	}
}

configurations {
	embeddedJars  // we will embed these into the binary artifact
	compile.extendsFrom(embeddedJars)
}

dependencies {
	compile "com.diffplug.durian:durian-core:${VER_DURIAN}"
	compile "com.diffplug.durian:durian-io:${VER_DURIAN}"
	compile "com.diffplug.freshmark:freshmark:${VER_FRESHMARK}"
	compile "org.eclipse.jgit:org.eclipse.jgit:${VER_JGIT}"
	testCompile "junit:junit:${VER_JUNIT}"
	testCompile "org.assertj:assertj-core:${VER_ASSERTJ}"
	testCompile "com.diffplug.durian:durian-testlib:${VER_DURIAN}"

	// add the eclipse jars to the embedded configuration
	eclipseDeps.each { embeddedJars "p2:${it}:+" }
}

jar {
	// this embeds the eclipse jars into our "fat jar"
	from {
		configurations.embeddedJars.collect{ it.isDirectory() ? it : zipTree(it) }
	}
	from {
		configurations.compile.findAll{ it.path.contains('com.diffplug.') }.collect{ it.isDirectory() ? it : zipTree(it) }
	}
	// the eclipse jars are signed, and our fat jar breaks the signatures
	// so we've gotta be sure to filter out the signatures
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.SF'
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)


/////////////////////
// SPOTLESS (fake) //
/////////////////////
task spotlessCheck(type: JavaExec) {
	classpath sourceSets.test.runtimeClasspath
	main = 'com.diffplug.gradle.spotless.SelfTestCheck'
}
check.dependsOn(spotlessCheck)

task spotlessApply(type: JavaExec) {
	classpath sourceSets.test.runtimeClasspath
	main = 'com.diffplug.gradle.spotless.SelfTestApply'
}
test {
	testLogging.showStandardStreams = true
}

//////////////
// FINDBUGS //
//////////////
apply plugin: 'findbugs'
findbugs {
	toolVersion = VER_FINDBUGS
	sourceSets = [sourceSets.main]	// don't check the test code
	ignoreFailures = false 	// bug free or it doesn't ship!
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'medium'	// low|medium|high (low = sensitive to even minor mistakes)
	omitVisitors = []		// bugs that we want to ignore
}
// HTML instead of XML
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
// we'll want the findbugs annotations (they don't have a 3.0.1 version)
dependencies {
	compileOnly 'com.google.code.findbugs:annotations:3.0.0'
	compileOnly 'com.google.code.findbugs:jsr305:3.0.0'
}

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

// use markdown in javadoc
def makeLink = { url, text -> "<a href=\"${url}\" style=\"text-transform: none;\">${text}</a>" }
def javadocInfo = '<h2>' + makeLink("https://github.com/${org}/${name}", "${group}:${name}:${version}") +
' by ' + makeLink('http://www.diffplug.com', 'DiffPlug') + '</h2>'

def verSnapshot = { it.endsWith('-SNAPSHOT') ? 'snapshot' : it }

javadoc {
	// Where it's possible to name parameters and methods clearly enough
	// that javadoc is not necessary, why make the code bigger?
	//
	// Thus, no javadoc warnings.
	options.addStringOption('Xdoclint:none', '-quiet')
	// setup the header
	options.header javadocInfo
	options.footer javadocInfo
	// setup links
	options.linksOffline('https://docs.oracle.com/javase/8/docs/api/', 'gradle/javadoc/java8')
	options.linksOffline("https://docs.gradle.org/2.14/javadoc/", 'gradle/javadoc/gradle')
	options.linksOffline("https://diffplug.github.io/durian/javadoc/${verSnapshot(VER_DURIAN)}/", 'gradle/javadoc/durian')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

////////////////
// PUBLISHING //
////////////////
def isSnapshot = project.version.endsWith('-SNAPSHOT')
// pulls the credentials from either the environment variable or gradle.properties
def cred = {
	if (System.env[it] != null) {
		return System.env[it]
	} else if (project.hasProperty(it)) {
		return project[it]
	} else {
		return 'unknown_' + it
	}
}

model {
	publishing {
		publications {
			pluginMaven {
				artifact sourcesJar
				artifact javadocJar
				pom.withXml {
					// remove the p2 dependencies because they are embedded
					// also remove 'com.diffplug' dependencies so that we can use spotless on its dependencies
					asNode().dependencies.'*'.each() {
						if (it.groupId.text() == 'p2' || it.groupId.text().startsWith('com.diffplug.')) {
							it.parent().remove(it)
						}
					}
					// add MavenCentral requirements to the POM
					asNode().children().last() + {
						resolveStrategy = Closure.DELEGATE_FIRST
						name project.name
						description project.description
						url "https://github.com/${project.org}/${project.name}"
						scm {
							url "https://github.com/${project.org}/${project.name}"
							connection "scm:git:git://github.com/${project.org}/${project.name}"
							developerConnection "scm:git:ssh:git@github.com/${project.org}/${project.name}"
						}
						licenses {
							license {
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/license/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
						developers {
							developer {
								id 'nedtwigg'
								name 'Ned Twigg'
								email 'ned.twigg@diffplug.com'
							}
						}
					}
				}
			}
		}
		if (isSnapshot) {
			// upload snapshots to oss.sonatype.org
			repositories { maven {
				url = 'https://oss.sonatype.org/content/repositories/snapshots'
				credentials {
					username = cred('nexus_user')
					password = cred('nexus_pass')
				}
			} }
		}
	}
}

if (!isSnapshot) {
	// upload releases to bintray and then mavenCentral
	bintray {
		user = cred('bintray_user')
		key = cred('bintray_pass')
		publications = ['pluginMaven']
		publish = true
		pkg {
			repo = 'opensource'
			name = project.name
			userOrg = project.org
			version {
				name = project.version
				mavenCentralSync {
					user = cred('nexus_user')
					password = cred('nexus_pass')
				}
			}
		}
	}

	publish.dependsOn(bintrayUpload)
	bintrayUpload.dependsOn(['generatePomFileForPluginMavenPublication', jar, sourcesJar, javadocJar])
}

//////////////////////////
// GRADLE PLUGIN PORTAL //
//////////////////////////
pluginBundle {
	// These settings are set for the whole plugin bundle
	website = "https://github.com/${project.org}/${project.name}"
	vcsUrl = "https://github.com/${project.org}/${project.name}"
	description = project.description

	plugins {
		spotlessPlugin {
			id = 'com.diffplug.gradle.spotless'
			displayName = 'Spotless formatting plugin'
			tags = ['format', 'style', 'license', 'header']
		}
	}

	mavenCoordinates {
		groupId = project.group
		artifactId = project.name
		version = project.version
	}
}

// the gradle plugin portal isn't really compatible with SNAPSHOT versions
// https://discuss.gradle.org/t/uploading-snapshot-versions-to-the-plugin-portal/11347
if (isSnapshot) {
	publishPlugins.enabled = false
}

//////////////////
// GITHUB PAGES //
//////////////////
githubPages {
	repoUri = "https://github.com/${project.org}/${project.name}"
	deleteExistingFiles = false
	pages {
		from javadoc.destinationDir
		into "javadoc/${verSnapshot(version)}"
	}
	credentials {
		username = cred('gh_token')
		password = ''
	}
}
tasks.prepareGhPages.dependsOn(":javadoc")
