plugins {
	// bintray uploading
	id "com.jfrog.bintray" version "1.3.1"
	// plugin publishing
	id "com.gradle.plugin-publish" version "0.9.1"
}

repositories {
	jcenter()
	// SNAPSHOT versions are free to rely on other SNAPSHOT libraries
	if (project.version.endsWith('-SNAPSHOT')) {
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
		configurations.all {
			resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		}
	}
	ivy {
		// Future versions can be found here: http://download.eclipse.org/eclipse/downloads/index.html
		url "http://download.eclipse.org/eclipse/updates/4.5/R-4.5.2-201602121500/"
		layout "pattern", {
			artifact "plugins/[artifact]_[revision].[ext]"
		}

		// There isn't a reliable way to get eclipse artifacts except through p2 repositories,
		// which gradle does not yet support.  For now we're forcing it with ivy.
		// https://discuss.gradle.org/t/is-it-possible-to-configure-a-p2-repository/6812/6

		// You might think this is crappy, and try to find some kind of maven upload.
		// You'll find a couple random artifacts, but they're all a trap.  Mismatching
		// versions and missing deps.
		//
		// The sweetest of the honeypots is https://repo.eclipse.org/content/groups/eclipse/
		// Please heed my warning fellow traveler: it is a trap!
	}
}

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'java'
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

// None of these eclipse jars are in the public repositories.  This means
// that when someone downloads this plugin, unless they add the weird
// ivy depenency, they won't be able to resolve the eclipse jars.
//
// To fix this, we embed the content of these eclispe jars into ourselves, as a "fat jar".
// As of now (v1.3), the jar is 8MB, which isn't awful.
configurations {
	embeddedJars
}

def eclipseDeps = [
	// The only dependencies we actually use
	'org.eclipse.jdt.core:3.11.2.v20160128-0629',
	'org.eclipse.text:3.5.400.v20150505-1044',

	// Because gradle can't consume p2, we have to resolve the transitive dependencies - and their versions - by hand.
	// The transitive dependencies are extremely unlikely to change, but we're probably going to want to upgrade to newer versions of Eclipse.
	// Here's how:
	// - Browse to http://download.eclipse.org/eclipse/updates/4.5/R-4.5.2-201602121500/plugins/?d
	// - Search through the page for the plugin id, and copy the version below
	'org.eclipse.core.contenttype:3.5.0.v20150421-2214',
	'org.eclipse.core.jobs:3.7.0.v20150330-2103',
	'org.eclipse.core.runtime:3.11.1.v20150903-1804',
	'org.eclipse.core.resources:3.10.1.v20150725-1910',
	'org.eclipse.equinox.common:3.7.0.v20150402-1709',
	'org.eclipse.equinox.preferences:3.5.300.v20150408-1437',
	'org.eclipse.osgi:3.10.102.v20160118-1700'
]
dependencies {
	compile gradleApi()
	compile "com.diffplug.durian:durian:${VER_DURIAN}"
	compile "com.diffplug.freshmark:freshmark:${VER_FRESHMARK}"

	// The only dependencies we actually use
	eclipseDeps.each { dep -> 
		def idx = dep.indexOf(':')
		def name = dep.substring(0, idx);
		def ver = dep.substring(idx + 1);
		embeddedJars "p2:${name}:${ver}"
		// UNCOMMENT TO DOWNLOAD SOURCE JARS
		//embeddedJars "p2:${name}.source:${ver}"
	}
	
	configurations.compile.extendsFrom(configurations.embeddedJars)
	
	testCompile 'org.mockito:mockito-core:1.10.19', {
		exclude group:'org.hamcrest', module: 'hamcrest-core'
	}
}

jar {
	// this embeds the eclipse jars into our "fat jar"
	from {
		configurations.embeddedJars.collect{ it.isDirectory() ? it : zipTree(it) }
	}
	from {
		configurations.compile.findAll{ it.path.contains('com.diffplug.') }.collect{ it.isDirectory() ? it : zipTree(it) }
	}
	// the eclipse jars are signed, and our fat jar breaks the signatures
	// so we've gotta be sure to filter out the signatures
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.SF'
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

////////////////
// PUBLISHING //
////////////////
def isSnapshot = project.version.endsWith('-SNAPSHOT')
// pulls the credentials from either the environment variable or gradle.properties
def cred = {
	if (System.env[it] != null) {
		return System.env[it]
	} else if (project.hasProperty(it)) {
		return project[it]
	} else {
		return 'unknown_' + it
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom.withXml {
				// remove the p2 dependencies because they are embedded
				// also remove 'com.diffplug' dependencies so that we can use spotless on its dependencies
				asNode().dependencies.'*'.each() {
					if (it.groupId.text() == 'p2' || it.groupId.text().startsWith('com.diffplug.')) {
						it.parent().remove(it)
					}
				}
				// add MavenCentral requirements to the POM
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name project.name
					description project.description
					url "https://github.com/${project.org}/${project.name}"
					scm {
						url "https://github.com/${project.org}/${project.name}"
						connection "scm:git:git://github.com/${project.org}/${project.name}"
						developerConnection "scm:git:ssh:git@github.com/${project.org}/${project.name}"
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'nedtwigg'
							name 'Ned Twigg'
							email 'ned.twigg@diffplug.com'
						}
					}
				}
			}
		}
	}
	if (isSnapshot) {
		// upload snapshots to oss.sonatype.org
		repositories { maven {
			url = 'https://oss.sonatype.org/content/repositories/snapshots'
			credentials {
				username = cred('nexus_user')
				password = cred('nexus_pass')
			}
		} }
	}
}

if (!isSnapshot) {
	// upload releases to bintray and then mavenCentral
	bintray {
		user = cred('bintray_user')
		key = cred('bintray_pass')
		publications = ['mavenJava']
		publish = true
		pkg {
			repo = 'opensource'
			name = project.name
			userOrg = project.org
			version {
				name = project.version
				mavenCentralSync {
					user = cred('nexus_user')
					password = cred('nexus_pass')
				}
			}
		}
	}

	publish.dependsOn(bintrayUpload)
	bintrayUpload.dependsOn(['generatePomFileForMavenJavaPublication', jar, sourcesJar, javadocJar])
}

//////////////////////////
// GRADLE PLUGIN PORTAL //
//////////////////////////
pluginBundle {
	// These settings are set for the whole plugin bundle
	website = "https://github.com/${project.org}/${project.name}"
	vcsUrl = "https://github.com/${project.org}/${project.name}"
	description = project.description

	plugins {
		spotlessPlugin {
			id = 'com.diffplug.gradle.spotless'
			displayName = 'Spotless formatting plugin'
			tags = ['format', 'style', 'license', 'header']
		}
	}

	mavenCoordinates {
		groupId = project.group
		artifactId = project.name
		version = project.version
	}
}

// the gradle plugin portal isn't really compatible with SNAPSHOT versions
// https://discuss.gradle.org/t/uploading-snapshot-versions-to-the-plugin-portal/11347
if (isSnapshot) {
	publishPlugins.enabled = false
}
