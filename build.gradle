buildscript {
	repositories {
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		// uploads to plugin portal
		classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
	}
}

repositories {
	jcenter()
	ivy {
		// Eclipse 4.5 M6 has lots of formatter improvements
		// Future versions can be found here: http://download.eclipse.org/eclipse/downloads/index.html
		url "http://download.eclipse.org/eclipse/updates/4.5/R-4.5-201506032000/"
		layout "pattern", {
			artifact "plugins/[artifact]_[revision].[ext]"
		}

		// There isn't a reliable way to get eclipse artifacts except through p2 repositories,
		// which gradle does not yet support.  For now we're forcing it with ivy.
		// https://discuss.gradle.org/t/is-it-possible-to-configure-a-p2-repository/6812/6

		// You might think this is crappy, and try to find some kind of maven upload.
		// You'll find a couple random artifacts, but they're all a trap.  Mismatching
		// versions and missing deps.
		//
		// The sweetest of the honeypots is https://repo.eclipse.org/content/groups/eclipse/
		// Please heed my warning fellow traveler: it is a trap!
	}
}

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'java'
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

// None of these eclipse jars are in the public repositories.  This means
// that when someone downloads this plugin, unless they add the weird
// ivy depenency, they won't be able to resolve the eclipse jars.
//
// To fix this, we embed the content of these eclispe jars into ourselves, as a "fat jar".
// As of now (v1.3), the jar is 8MB, which isn't awful.
configurations {
	embeddedJars
}

dependencies {
	compile gradleApi()

	// The only dependencies we actually use
	embeddedJars 'p2:org.eclipse.jdt.core:3.11.0.v20150602-1242'
	embeddedJars 'p2:org.eclipse.text:3.5.400.v20150505-1044'

	// Because gradle can't consume p2, we have to resolve the transitive dependencies - and their versions - by hand.
	// The transitive dependencies are extremely unlikely to change, but we're probably going to want to upgrade to newer versions of Eclipse.
	// Here's how:
	// - Download http://download.eclipse.org/eclipse/updates/4.5milestones/S-4.5M6-201503200800/artifacts.jar
	// - Unzip this file, and you'll have artifacts.xml
	// - Grep through the file for the plugin id, and copy the version below
	embeddedJars 'p2:org.eclipse.core.contenttype:3.5.0.v20150421-2214'
	embeddedJars 'p2:org.eclipse.core.jobs:3.7.0.v20150330-2103'
	embeddedJars 'p2:org.eclipse.core.runtime:3.11.0.v20150405-1723'
	embeddedJars 'p2:org.eclipse.core.resources:3.10.0.v20150423-0755'
	embeddedJars 'p2:org.eclipse.equinox.common:3.7.0.v20150402-1709'
	embeddedJars 'p2:org.eclipse.equinox.preferences:3.5.300.v20150408-1437'
	embeddedJars 'p2:org.eclipse.osgi:3.10.100.v20150529-1857'

	configurations.compile.extendsFrom(configurations.embeddedJars)
}

jar {
	// this embeds the eclipse jars into our "fat jar"
	from {
		configurations.embeddedJars.collect { it.isDirectory() ? it : zipTree(it) }
	}
	// the eclipse jars are signed, and our fat jar breaks the signatures
	// so we've gotta be sure to filter out the signatures
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.SF'
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

////////////////
// PUBLISHING //
////////////////
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom.withXml {
				// remove the p2 dependencies because they are embedded
				asNode().dependencies.'*'.each() {
					if (it.groupId.text() == 'p2') {
						it.parent().remove(it)
					}
				}
				// add MavenCentral requirements to the POM
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name project.name
					description project.description
					url "https://github.com/${project.org}/${project.name}"
					scm {
						url "https://github.com/${project.org}/${project.name}"
						connection "scm:git:git://github.com/${project.org}/${project.name}"
						developerConnection "scm:git:ssh:git@github.com/${project.org}/${project.name}"
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'nedtwigg'
							name 'Ned Twigg'
							email 'ned.twigg@diffplug.com'
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			def isSnapshot = project.version.endsWith('-SNAPSHOT')
			if (isSnapshot) {
				url = 'https://oss.sonatype.org/content/repositories/snapshots'
			} else {
				url = "https://api.bintray.com/maven/diffplug/opensource/${project.name}"
			}
			credentials {
				username = System.env[isSnapshot ? 'nexus_user' : 'bintray_user']
				password = System.env[isSnapshot ? 'nexus_pass' : 'bintray_pass']
				if (username == null || password == null) {
					username = project.property(isSnapshot ? 'nexus_user' : 'bintray_user')
					password = project.property(isSnapshot ? 'nexus_pass' : 'bintray_pass')
				}
			}
		}
	}
}

//////////////////////////
// GRADLE PLUGIN PORTAL //
//////////////////////////
pluginBundle {
	// These settings are set for the whole plugin bundle
	website = "https://github.com/${project.org}/${project.name}"
	vcsUrl = "https://github.com/${project.org}/${project.name}"
	description = project.description

	plugins {
		spotlessPlugin {
			id = 'com.diffplug.gradle.spotless'
			displayName = 'Spotless formatting plugin'
			tags = ['format', 'style', 'license', 'header']
		}
	}

	mavenCoordinates {
		groupId = project.group
		artifactId = project.name
		version = project.version
	}
}

task wrapper(type: Wrapper) {
	distributionUrl = "http://services.gradle.org/distributions/gradle-2.6-all.zip"
}
