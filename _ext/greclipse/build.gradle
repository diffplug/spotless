import java.io.File

import org.apache.commons.io.filefilter.DirectoryFileFilter

plugins {
	// bintray uploading
	id 'com.jfrog.bintray' version '1.3.1'
	// p2 dependencies
	id 'com.diffplug.gradle.p2.asmaven' version '3.3.0'
}

repositories {
	maven { url 'https://plugins.gradle.org/m2/' }
}

apply plugin: 'java'

///////////////////
// Configuration //
///////////////////

// The dependencies to pull from GrEclipse's p2 repositories
def grEclipseDeps = [
	'org.codehaus.groovy.eclipse.refactoring':'+', // GroovyFormatter and related

	// The following lists does not reflect the complete transitive required packages, but
	// the once used during code formatting
	'org.codehaus.groovy':'+', // Groovy compiler patches supporting use within GrEclipse and Groovy itself
	'org.codehaus.groovy.eclipse.core':'+', // Groovy core classes (provides central logging used by formatter)
	'org.eclipse.jdt.core':"${grec_VER_JDT_PATCH}", // Patches org.eclipse.jdt.core classes supporting use within GrEclipse (provides AST generator)
	'org.eclipse.jdt.groovy.core':'+' // Extends org.eclipse.jdt.core for Groovy
]

// The dependencies to pull from Eclipse's p2 repositories
def eclipseDeps = [
	'org.eclipse.core.commands':'+', // Event manager required by preference store
	'org.eclipse.core.contenttype':'+', // Required by JavaCore options
	'org.eclipse.core.jobs':'+', // Required by JavaCore options
	'org.eclipse.core.runtime':'+',  // Provides central logging interface
	'org.eclipse.core.resources':'+', // GrEclipse parser checks workspace resources
	'org.eclipse.equinox.common':'+', // Provides runtime status used during exception reporting
	'org.eclipse.equinox.preferences':'+', // Preferences used for formatter configuration
	'org.eclipse.jface':'+', // PreferenceStore for creating preferences from properties
	'org.eclipse.jface.text':'+', // Only required for ITextSelection (never used for our calls)
	'org.eclipse.osgi':'+', // GroovyCore accesses OSGI bundle (but not effectively used)
	'org.eclipse.text':'+' // Provides Document data structure for formatter
]

ext {
	//Include/Excludes form the JARs, which goes into a fat-jar with the spottless formatter interface.
	jarInclude = [
		'**/*.class', // Take all classes
		'**/*.java', // ... and sources.
		'**/*.properties', // Text resources (for messages, etc)
		'*.html', // License information about the included JARs,
		'META-INF/**' // Information about the origin of the individual class files
	]
	jarExclude = [
		'META-INF/*.RSA', // The eclipse jars are signed, and our fat-jar breaks the signatures
		'META-INF/*.SF', // ... so all signatures are filtered
		'org/codehaus/groovy/eclipse/core/GroovyCoreActivator.*', // Is replaced to use the plugin code without Eclipse
		'org/codehaus/groovy/antlr/ErrorRecoveredCSTParserPluginFactory.*' // Is replaced to allow parser error handling
	]

	//Some JARs include JARs themselfs
	internalJars = [
		//Jars included by org.codehaus.groovy
		"**/groovy-all-${grec_VER_GROOVY}", // Use Groovy compiler compatible with GrEclipse instead of localGroovy
		"**/groovy-${grec_VER_GROOVY}", // Groovy compiler sources do not follow the same name pattern of groovy-all
		'**/groovy-eclipse', // Patches/Overrides some of the Groovy compiler classes
		'**/eclipse-trace', // Provides logging capabilities for groovy-eclipse

		//Jars included by org.eclipse.jdt.groovy.core
		'**/nlcl' //Non locking class loader used by groovy compiler
	]

	// GrEclipse source bundle (not available as dedicated source JARs)
	grEclipseSourceUrl = "https://github.com/groovy/groovy-eclipse/archive/v${grec_VER_GRECLIPSE}.tar.gz"
	grEclipseSourceTgz = project.file("build/greclipse-archive/v${grec_VER_GRECLIPSE}.tar.gz")
	grEclipseSourceDir = project.file('build/greclipse-archive/grEclipseSource')
	// Sources of GrEclipse dependencies for...
	verGroovySource = grec_VER_GROOVY.substring(0, grec_VER_GROOVY.lastIndexOf('.')).replace('.', '')
	grEclipseDepsSource = [
		"base/org.codehaus.groovy${verGroovySource}/src", // org.codehaus.groovy unit
		"base/org.codehaus.groovy${verGroovySource}/src-trace", // eclipse-trace internal JAR
		'base/org.eclipse.jdt.groovy.core/src', // org.eclipse.jdt.groovy.core unit
		'ide/org.codehaus.groovy.eclipse.core/src', // org.codehaus.groovy.eclipse.core unit
		'ide/org.codehaus.groovy.eclipse.refactoring/src', // org.codehaus.groovy.eclipse.refactoring unit
	]
	//The jdt-patch is organised in sub-modules patching existing code
	jdtPatchDepsSourceDir = new File("${grEclipseSourceDir}/jdt-patch/e${grec_VER_ECLIPSE.replace('.', '')}/org.eclipse.jdt.core")

	// The directory contains all external classes for the fat-jar
	embeddedClassesDirName = 'build/embeddedClasses'
	embeddedClassesDir = project.file(embeddedClassesDirName)

	// The directory contains all external source files the fat-jar is based on
	embeddedSourcesDirName = 'build/embeddedSources'
	embeddedSourcesDir = project.file(embeddedSourcesDirName)

}

// build a maven repo in our build folder containing these artifacts
p2AsMaven {
	group 'p2', {
		repoEclipse grec_VER_ECLIPSE
		eclipseDeps.keySet.each { p2.addIU(it) }
		eclipseDeps.keySet.each { p2.addIU(it + '.source') }
		repo "http://dist.springsource.org/release/GRECLIPSE/${grec_VER_GRECLIPSE}/e${grec_VER_ECLIPSE}"
		grEclipseDeps.keySet.each { p2.addIU(it) }
	}
}

configurations {
	embeddedJars // JARs (Eclipse and GrEclipse) the fat-jar is based uppon
	eclipseSource // Source for Eclipse JARS (GrEclipse provides no source packages)
}

///////////////////
// External Deps //
///////////////////

task grEclipseSource {
	description = 'Download GrEclipse from GitHub archive.'
	inputs.property('url', grEclipseSourceUrl.toString())
	outputs.file(grEclipseSourceDir)

	doLast {
		grEclipseSourceDir.deleteDir()
		grEclipseSourceDir.mkdirs()
		ant.get(src: grEclipseSourceUrl, dest: grEclipseSourceTgz, skipexisting: 'true')
		ant.untar(src: grEclipseSourceTgz, dest: grEclipseSourceDir, compression: 'gzip') {
			cutdirsmapper(dirs: '1')
		}
	}
}

task copyEmbeddedSources(dependsOn: grEclipseSource) {
	description = "Copies filtered set of source files from the Eclise/GrEclipse dependencies to '${project.relativePath(embeddedSourcesDir)}'."
	inputs.files(configurations.eclipseSource)
	inputs.file(grEclipseSourceDir)
	inputs.property('internalJars', internalJars)
	inputs.property('jarInclude', jarInclude)
	inputs.property('jarExclude', jarExclude)
	outputs.file(embeddedSourcesDir)

	doLast {
		embeddedSourcesDir.deleteDir()
		embeddedSourcesDir.mkdirs()
		configurations.eclipseSource.each {
			unjar(it, embeddedSourcesDir)
		}

		// Incorparate the Eclipse patches/extensions into default source directory structure
		copy("${embeddedSourcesDir}/ant_tasks/resources-antsrc", embeddedSourcesDir, 'move')

		// Extract source JARs provided with GrEcslipse (for exampel the compiler)
		def jarSourceIncludes = []
		internalJars.each {
			def jarFilter = it
			['sources', 'source', 'src'].each {
				jarSourceIncludes << "${jarFilter}-${it}.jar"
			}
		}
		def tree = fileTree(dir: grEclipseSourceDir, includes: jarSourceIncludes)
		tree.each {
			unjar(it, embeddedSourcesDir)
		}

		grEclipseDepsSource.each {
			copy("${grEclipseSourceDir}/${it}", embeddedSourcesDir)
		}
		//The jdt-patch is organised in sub-modules patching existing code
		jdtPatchDepsSourceDir.list(DirectoryFileFilter.DIRECTORY).each {
			copy("${jdtPatchDepsSourceDir}/${it}", embeddedSourcesDir)
		}

		//Clean up empty directories and class files
		ant.delete(includeemptydirs: 'true') {
			fileset(dir: embeddedSourcesDir) {
				or {
					and {
						size(value: '0')
						type(type: 'dir')
					}
					filename(name: '**/*.class')
					filename(name: '*.java')
				}
			}
		}
	}

}

def copy(fromDir, toDir, method='copy') {
	logger.debug("${method} ${fromDir} to ${toDir}")
	ant."$method"(todir: toDir, includeEmptyDirs: 'false', overwrite: 'true') {
		fileset(dir: fromDir) {
			jarInclude.each {
				include(name: "${it}")
			}
			jarExclude.each {
				exclude(name: "${it}")
			}
		}
	}
}

task unjarEmbeddedClasses {
	description = "Copies filtered set of embedded classes from the Eclise/GrEclipse dependencies to '${project.relativePath(embeddedClassesDir)}'."
	inputs.files(configurations.embeddedJars)
	inputs.property('internalJars', internalJars)
	inputs.property('jarInclude', jarInclude)
	inputs.property('jarExclude', jarExclude)
	outputs.file(embeddedClassesDir)

	doLast {
		embeddedClassesDir.deleteDir()
		embeddedClassesDir.mkdirs()
		configurations.embeddedJars.each {
			unjar(it, embeddedClassesDir)
		}
		//Unpack internal JARs. Maintain the order defined in  internalJars
		internalJars.each {
			fileTree(embeddedClassesDir).include("${it}.jar").each {
				unjar(it, embeddedClassesDir)
				delete(it)
			}
		}
	}
}

def unjar(File jarFile, File destDir) {
	ant.unjar(src: jarFile, dest: destDir) {
		patternset {
			jarInclude.each {
				include(name: "${it}")
			}
			internalJars.each {
				include(name: "**/${it}.jar")
			}
			jarExclude.each {
				exclude(name: "${it}")
			}
		}
	}
	//Keep the manifest for transparency
	ant.move(file: "${destDir}/META-INF/MANIFEST.MF", tofile: "${destDir}/META-INF/${jarFile.getName()}-MANIFEST.MF", quiet: 'true', failonerror: 'false')
	//Keep licenses and other human readable information for transparency
	ant.move(todir: destDir, quiet: 'true') {
		fileset(dir: destDir) {
			include(name: '*')
			type(type: 'file')
			exclude(name: '*jar-*')
			exclude(name: '*.jar')
		}
		mapper(type: 'glob', from: '*', to: "${jarFile.getName()}-*")
	}
}


/////////////
// Compile //
/////////////

dependencies {
	// Add the Eclipse and GrEclipse jars to the embedded configuration.
	eclipseDeps.each { groupArtifact, version ->
		embeddedJars "p2:${groupArtifact}:${version}"
		eclipseSource "p2:${groupArtifact}:${version}:sources"
	}
	// Some grEclipseDeps classes patch/override the eclipseDeps once. Hence grEclipseDeps
	// must added to embeddedJars after eclipseDeps.
	grEclipseDeps.each { groupArtifact, version ->
		embeddedJars "p2:${groupArtifact}:${version}"
	}

	// The resulting fat-jar will have no transitive dependencies itself.
	compile files(embeddedClassesDir)

	// testing
	testCompile "junit:junit:${grec_VER_JUNIT}"
}

tasks.compileJava.dependsOn(unjarEmbeddedClasses)


/////////
// IDE //
/////////

apply plugin: 'eclipse'

eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
		file {
			withXml { xmlProvider ->
				def classpathNode = xmlProvider.asNode()
				def embeddedClassesPath = embeddedClassesDir.absolutePath
				def embeddedNode = classpathNode.find { it.@path == embeddedClassesPath }
				embeddedNode.@sourcepath = embeddedSourcesDir
			}
		}
	}
}

// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)
// Encure that the dependent classes and sources are preovided for compilation if project is build via Eclipse instead of command line
tasks.eclipseClasspath.dependsOn(unjarEmbeddedClasses, copyEmbeddedSources)

apply plugin: 'idea'

// Encure that the dependent classes and sources are preovided for compilation if project is build via Eclipse instead of command line
tasks.idea.dependsOn(unjarEmbeddedClasses, copyEmbeddedSources)


tasks.idea.doLast {
	def ideaEmbeddedLibTableFile = project.file('.idea/libraries/embeddedClasses.xml')
	def ideaEmbeddedLibTableDir = ideaEmbeddedLibTableFile.parentFile
	ideaEmbeddedLibTableDir.parentFile.mkdir()
	ideaEmbeddedLibTableDir.mkdir()
	ideaEmbeddedLibTableFile.delete()
	ideaEmbeddedLibTableFile << """
<component name="libraryTable">
<library name="embeddedClasses">
	<CLASSES>
	<root url="file://\$PROJECT_DIR\$/${embeddedClassesDirName}" />
	</CLASSES>
	<JAVADOC />
	<SOURCES>
	<root url="file://\$PROJECT_DIR\$/${embeddedSourcesDirName}" />
	</SOURCES>
</library>
</component>
	"""
}

////////////////
// Publishing //
////////////////
apply plugin: 'maven-publish'

jar {
	dependsOn << unjarEmbeddedClasses
	from (embeddedClassesDir)
}

task sourcesJar(type: Jar, dependsOn: copyEmbeddedSources) {
	classifier = 'sources'
	from ([sourceSets.main.allJava, embeddedSourcesDir])
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

def isSnapshot = grec_version.endsWith('-SNAPSHOT')
// pulls the credentials from either the environment variable or gradle.properties
def cred = {
	if (System.env[it] != null) {
		return System.env[it]
	} else if (project.hasProperty(it)) {
		return project[it]
	} else {
		return 'unknown_' + it
	}
}

model {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact jar
				artifact sourcesJar
				artifact javadocJar

				groupId project.grec_group
				artifactId project.grec_artifactId
				version project.grec_version

				pom.withXml {

					// add MavenCentral requirements to the POM
					asNode().children().last() + {
						resolveStrategy = Closure.DELEGATE_FIRST
						name project.grec_artifactId
						description project.grec_description
						url "https://github.com/${project.grec_org}/${project.name}"
						scm {
							url "https://github.com/${project.grec_org}/${project.name}"
							connection "scm:git:git://github.com/${project.grec_org}/${project.name}"
							developerConnection "scm:git:ssh:git@github.com/${project.grec_org}/${project.name}"
						}
						licenses {
							license {
								name 'Eclipse Public License - v 1.0'
								url 'https://www.eclipse.org/legal/epl-v10.html'
								distribution 'repo'
							}
						}
						developers {
							developer {
								id 'fvgh'
								name 'Frank Vennemeyer'
								email 'frankgh@zoho.com'
							}
						}
					}
				}
			}
		}
		if (isSnapshot) {
			// upload snapshots to oss.sonatype.org
			repositories { maven {
				url = 'https://oss.sonatype.org/content/repositories/snapshots'
				credentials {
					username = cred('nexus_user')
					password = cred('nexus_pass')
				}
			} }
		}
	}
}

if (!isSnapshot) {
	// upload releases to bintray and then mavenCentral
	bintray {
		user = cred('bintray_user')
		key = cred('bintray_pass')
		publications = ['mavenJava']
		publish = true
		pkg {
			repo = 'opensource'
			name = project.grec_artifactId
			userOrg = project.grec_org
			version {
				name = project.grec_version
				mavenCentralSync {
					user = cred('nexus_user')
					password = cred('nexus_pass')
				}
			}
		}
	}

	publish.dependsOn(bintrayUpload)
	bintrayUpload.dependsOn(['generatePomFileForMavenJavaPublication', jar, sourcesJar, javadocJar])
}
