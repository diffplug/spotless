//////////
// JAVA //
//////////
repositories {
	mavenCentral()
	jcenter()
	/* Allow access of local SNAPSHOT builds. Sanity of dependencies
	   is guranteed by the lib-extra build. */
	mavenLocal()
}

// setup java
apply plugin: 'java'

sourceCompatibility = ext_VER_JAVA
targetCompatibility = ext_VER_JAVA
tasks.withType(JavaCompile) { 
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked"
	options.compilerArgs << "-Xlint:deprecation" 
}

// Use file locking
configurations {
    compileClasspath {
        def gradleVersion = GradleVersion.current()
        def requiredVersion = GradleVersion.version('4.8')
        if (gradleVersion >= requiredVersion) {
            resolutionStrategy.activateDependencyLocking()
        }
    }
}


/////////////
// ECLIPSE //
/////////////
apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

//////////////
// FINDBUGS //
//////////////
apply plugin: 'findbugs'
findbugs {
	toolVersion = '3.0.1'
	sourceSets = [
		// don't check the test code
		sourceSets.main
	]
	ignoreFailures = false 	// bug free or it doesn't ship!
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'medium'	// low|medium|high (low = sensitive to even minor mistakes)
	omitVisitors = []		// bugs that we want to ignore
}
// HTML instead of XML
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
// we'll want the findbugs annotations (they don't have a 3.0.1 version)
dependencies {
	compileOnly 'com.google.code.findbugs:annotations:3.0.0'
	compileOnly 'com.google.code.findbugs:jsr305:3.0.0'

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.5.2'
}
