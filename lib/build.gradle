plugins {
	id 'java-library'
	id 'io.github.davidburstrom.version-compatibility'
}
ext.artifactId = project.artifactIdLib
version = rootProject.spotlessChangelog.versionNext
apply from: rootProject.file('gradle/java-setup.gradle')
apply from: rootProject.file('gradle/java-publish.gradle')

def NEEDS_GLUE = [
	// (alphabetic order please)
	'cleanthat',
	'diktat',
	'flexmark',
	'gherkin',
	'googleJavaFormat',
	'gson',
	'jackson',
	'ktfmt',
	'ktlint',
	'palantirJavaFormat',
	'scalafmt',
	'sortPom'
]
for (glue in NEEDS_GLUE) {
	sourceSets.register(glue) {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
		java {}
	}
}

versionCompatibility {
	adapters {
		// (alphabetic order please)
		namespaces.register('Cleanthat') {
			versions = [
				'2.1',
			]
			targetSourceSetName = 'cleanthat'
		}
		namespaces.register('KtLint') {
			// as discussed at https://github.com/diffplug/spotless/pull/1475
			// we will support no more than 2 breaking changes at a time = 3 incompatible versions
			// we will try to drop down to only one version if a stable API can be maintained for a full year
			versions = [
				'0.46.0',
				'0.47.0',
				'0.48.0',
			]
			targetSourceSetName = 'ktlint'
		}
	}
}

tasks.named("check").configure {
	dependsOn(tasks.named("testCompatibilityAdapters"))
	dependsOn(tasks.named("testCompatibility"))
}

dependencies {
	compileOnly 'org.slf4j:slf4j-api:2.0.0'
	testCommonImplementation 'org.slf4j:slf4j-api:2.0.0'

	// zero runtime reqs is a hard requirements for spotless-lib
	// if you need a dep, put it in lib-extra
	testCommonImplementation "org.junit.jupiter:junit-jupiter:$VER_JUNIT"
	testCommonImplementation "org.assertj:assertj-core:$VER_ASSERTJ"
	testCommonImplementation "com.diffplug.durian:durian-testlib:$VER_DURIAN"

	// GLUE CODE (alphabetic order please)
	// cleanthat
	String VER_CLEANTHAT='2.13'
	cleanthatCompileOnly "io.github.solven-eu.cleanthat:java:$VER_CLEANTHAT"
	compatCleanthat2Dot1CompileAndTestOnly "io.github.solven-eu.cleanthat:java:$VER_CLEANTHAT"
	// diktat
	diktatCompileOnly 'org.cqfn.diktat:diktat-rules:1.2.5'
	// flexmark
	flexmarkCompileOnly 'com.vladsch.flexmark:flexmark-all:0.64.0'
	// gherkin
	gherkinCompileOnly 'io.cucumber:gherkin-utils:8.0.2'
	gherkinCompileOnly 'org.slf4j:slf4j-api:2.0.0'
	// googleJavaFormat
	googleJavaFormatCompileOnly 'com.google.googlejavaformat:google-java-format:1.16.0'
	// gson
	gsonCompileOnly 'com.google.code.gson:gson:2.10.1'
	// jackson
	String VER_JACKSON='2.14.2'
	jacksonCompileOnly "com.fasterxml.jackson.core:jackson-databind:$VER_JACKSON"
	jacksonCompileOnly "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$VER_JACKSON"
	// ktfmt
	ktfmtCompileOnly "com.facebook:ktfmt:0.43"
	ktfmtCompileOnly("com.google.googlejavaformat:google-java-format") {
		version {
			strictly '1.7' // for JDK 8 compatibility
		}
	}
	// ktlint
	String VER_KTLINT='0.46.1'
	ktlintCompileOnly "com.pinterest:ktlint:$VER_KTLINT"
	ktlintCompileOnly "com.pinterest.ktlint:ktlint-core:$VER_KTLINT"
	ktlintCompileOnly "com.pinterest.ktlint:ktlint-ruleset-experimental:$VER_KTLINT"
	ktlintCompileOnly "com.pinterest.ktlint:ktlint-ruleset-standard:$VER_KTLINT"
	compatKtLint0Dot46Dot0CompileOnly 'com.pinterest.ktlint:ktlint-core:0.46.0'
	compatKtLint0Dot46Dot0CompileOnly 'com.pinterest.ktlint:ktlint-ruleset-experimental:0.46.0'
	compatKtLint0Dot46Dot0CompileOnly 'com.pinterest.ktlint:ktlint-ruleset-standard:0.46.0'
	compatKtLint0Dot47Dot0CompileOnly 'com.pinterest.ktlint:ktlint-core:0.47.0'
	compatKtLint0Dot47Dot0CompileOnly 'com.pinterest.ktlint:ktlint-ruleset-experimental:0.47.0'
	compatKtLint0Dot47Dot0CompileOnly 'com.pinterest.ktlint:ktlint-ruleset-standard:0.47.0'
	compatKtLint0Dot48Dot0CompileAndTestOnly 'com.pinterest.ktlint:ktlint-core:0.48.0'
	compatKtLint0Dot48Dot0CompileAndTestOnly 'com.pinterest.ktlint:ktlint-ruleset-experimental:0.48.0'
	compatKtLint0Dot48Dot0CompileAndTestOnly 'com.pinterest.ktlint:ktlint-ruleset-standard:0.48.0'
	// palantirJavaFormat
	palantirJavaFormatCompileOnly 'com.palantir.javaformat:palantir-java-format:1.1.0' 	// this version needs to stay compilable against Java 8 for CI Job testNpm
	// scalafmt
	scalafmtCompileOnly "org.scalameta:scalafmt-core_2.13:3.7.3"
	// sortPom
	sortPomCompileOnly 'com.github.ekryd.sortpom:sortpom-sorter:3.2.1'
	sortPomCompileOnly 'org.slf4j:slf4j-api:2.0.0'
}

// we'll hold the core lib to a high standard
spotbugs { reportLevel = 'low' } // low|medium|high (low = sensitive to even minor mistakes)

apply from: rootProject.file('gradle/special-tests.gradle')
tasks.withType(Test).configureEach {
	if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16)) {
		// https://docs.gradle.org/7.5/userguide/upgrading_version_7.html#removes_implicit_add_opens_for_test_workers
		jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
	}
}

jar {
	for (glue in NEEDS_GLUE) {
		from sourceSets.getByName(glue).output.classesDirs
	}
}
